version: 2.1

orbs:
  python: circleci/python@2.0.3
  aws-cli: circleci/aws-cli@4.1.3
  aws-cloudformation: orbss/aws-cloudformation@0.1.6

jobs:
  cfn-lint:
    executor: python/default
    steps:
      - checkout
      - run: pip install cfn-lint
      - run:
          name: run cfn-lint
          command: |
            cfn-lint -i W3002 -t cloudformation/*.yml

  execute-cfn:
    executor: aws-cloudformation/default
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - aws-cloudformation/deploy:
          stack-name: "lecture13-vpc"
          template-file-path: "cloudformation/lect13-vpc.yml"
      - aws-cloudformation/deploy:
          stack-name: "lecture13-ec2"
          template-file-path: "cloudformation/lect13-ec2.yml"
          capabilities: CAPABILITY_NAMED_IAM
      - aws-cloudformation/deploy:
          stack-name: "lecture13-s3"
          template-file-path: "cloudformation/lect13-s3.yml"
      - aws-cloudformation/deploy:
          stack-name: "lecture13-rds"
          template-file-path: "cloudformation/lect13-rds.yml"
      - aws-cloudformation/deploy:
          stack-name: "lecture13-alb"
          template-file-path: "cloudformation/lect13-alb.yml"
      - aws-cloudformation/deploy:
          stack-name: "lecture13-cw"
          template-file-path: "cloudformation/lect13-cw.yml"
          capabilities: CAPABILITY_NAMED_IAM

  get-value-from-cfn:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - run:  # Get values of EC2 Public IP, RDS Username, RDS Password, RDS Endpoint and ALB DNS Host, using AWS CLI
          name: set environment variables
          command: |
            echo $(aws ec2 describe-instances --filters Name=tag:Name,Values=lecture13-ec2 --query Reservations[].Instances[].PublicIpAddress[] --output text)
            echo $(aws rds describe-db-instances --db-instance-identifier lecture13-rds --query DBInstances[].Endpoint[].Address[] --output text)
            echo $(aws rds describe-db-instances --db-instance-identifier lecture13-rds --query DBInstances[].MasterUsername[] --output text)
            echo $(aws cloudformation describe-stacks --stack-name lecture13-s3 --query Stacks[].Parameters[].ParameterValue[] --output text)
            echo $(aws elbv2 describe-load-balancers --names lecture13-lb --query LoadBalancers[].DNSName[] --output text)
            echo $(aws ssm get-parameter --name /lecture13/rds-pass --with-decryption --query Parameter.Value --output text)

            #--------
            set -x
            #----EC2 Public IP----
            echo $(aws cloudformation describe-stacks --stack-name lecture13-ec2 --query "Stacks[0].Outputs[?OutputKey=='EC2PublicIpAddress'].OutputValue" --output text)
            echo $(aws cloudformation describe-stacks --stack-name lecture13-ec2 --query 'Stacks[].Outputs[?OutputKey==`EC2publicIP`].OutputValue' --output text)
            #----RDS Endpoint----
            echo $(aws cloudformation describe-stacks --stack-name lecture13-rds "Stacks[0].Outputs[?OutputKey=='RDSEndpoint'].OutputValue" --output text)
            echo $(aws cloudformation describe-stacks --stack-name lecture13-rds --query 'Stacks[].Outputs[?OutputKey==`DBuser`].OutputValue' --output text)
            echo $(aws cloudformation describe-stacks --stack-name lecture13-rds --query 'Stacks[].Outputs[?OutputKey==`DBpassword`].OutputValue' --output text)
            echo $(aws cloudformation describe-stacks --stack-name lecture13-rds --query 'Stacks[].Outputs[?OutputKey==`DBhost`].OutputValue' --output text)
            #----ALB Host----
            echo $(aws cloudformation describe-stacks --stack-name lecture13-alb --query "Stacks[0].Outputs[?OutputKey=='ALBDNSName'].OutputValue" --output text)
            echo $(aws cloudformation describe-stacks --stack-name lecture13-alb --query 'Stacks[].Outputs[?OutputKey==`ALBendpoint`].OutputValue' --output text)
            #----S3----
            echo $(aws cloudformation describe-stacks --stack-name lecture13-s3 --query "Stacks[0].Outputs[?OutputKey=='S3BuckeName'].OutputValue" --output text)
            echo $(aws cloudformation describe-stacks --stack-name lecture13-s3 --query 'Stacks[].Outputs[?OutputKey==`S3bucketName`].OutputValue' --output text)

            #echo export X=$(X) >> $BASH_ENV
            #source "$BASH_ENV"

            #echo export =$() >> env_vars.sh
            #cat env_vars.sh

            # jqコマンド: JSON(JavaScript Object Notation)データを操作・抽出・変換
            #.sh形式にしている理由=====
            # sourceコマンドの利用:
            # source env_vars.shコマンドを使用すると、そのスクリプト内のコマンドが現在のシェルで実行されます。この方法により、スクリプト内で設定された環境変数は現在のシェル環境に適用されます。
            # source（または.）はスクリプトをサブシェルで実行するのではなく、現在のシェルで実行するため、スクリプト内の環境変数設定が有効になります。
            # シバンの必要性がない:
            # シェルスクリプトを直接実行する場合は、#!/bin/bashのようなシバンが必要ですが、sourceで読み込むスクリプトには必要ありません。
            # .shファイルとして保存する理由
            # わかりやすさ:
            # .sh拡張子を持つファイルは、シェルスクリプトであることが明確です。これにより、ファイルの内容と目的が一目でわかります。
            # 一貫性:
            # 環境変数の設定をスクリプトファイルとして保存することで、他のスクリプトやジョブから再利用が容易になります。
            #=====
#-------------------------------------------------------------------------------------
#      - run:
#          name: cat $BASH_ENV
#          command: |
#            cat $BASH_ENV
#            cp $BASH_ENV bash.env
#      - persist_to_workspace:
#          root: .
#          paths:
#            - bash.env
#-------------------------------------------------------------------------------------

workflows:
  lecture13-workflow:
    jobs:
      #- cfn-lint
      #- execute-cfn:
      #    requires:
      #      - cfn-lint
      - get-value-from-cfn
