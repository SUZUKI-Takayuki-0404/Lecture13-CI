version: 2.1

orbs:
  python: circleci/python@2.0.3
  aws-cli: circleci/aws-cli@4.1.3
  aws-cloudformation: orbss/aws-cloudformation@0.1.6
  ansible-playbook: orbss/ansible-playbook@0.0.5
  ruby: circleci/ruby@2.1.4

parameters:
  stack-name:
    type: string
    default: "lecture13"  # << pipeline.parameters.stack-name >>

jobs:
  cfn-lint:
    executor: python/default
    steps:
      - checkout
      - run: pip install cfn-lint
      - run:
          name: run cfn-lint
          command: |
            cfn-lint -i W3002 -t cloudformation/*.yml

#----CloudFormation(cfn)----
  execute-cfn:
    executor: aws-cloudformation/default
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - aws-cloudformation/deploy:
          stack-name: "<< pipeline.parameters.stack-name >>-vpc"
          template-file-path: "cloudformation/lect13-vpc.yml"
      - aws-cloudformation/deploy:
          stack-name: "<< pipeline.parameters.stack-name >>-ec2"
          template-file-path: "cloudformation/lect13-ec2.yml"
          capabilities: CAPABILITY_NAMED_IAM
      - aws-cloudformation/deploy:
          stack-name: "<< pipeline.parameters.stack-name >>-s3"
          template-file-path: "cloudformation/lect13-s3.yml"
      - aws-cloudformation/deploy:
          stack-name: "<< pipeline.parameters.stack-name >>-rds"
          template-file-path: "cloudformation/lect13-rds.yml"
      - aws-cloudformation/deploy:
          stack-name: "<< pipeline.parameters.stack-name >>-alb"
          template-file-path: "cloudformation/lect13-alb.yml"
      - aws-cloudformation/deploy:
          stack-name: "<< pipeline.parameters.stack-name >>-cw"
          template-file-path: "cloudformation/lect13-cw.yml"
          capabilities: CAPABILITY_NAMED_IAM

#----Get-variables-from-cfn----
  get-variables-from-cfn:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - run:  # Get values of EC2 Public IP, RDS Username, RDS Password, RDS Endpoint and ALB DNS Host, using AWS CLI
          name: set environment variables in env_vars.sh
          command: |
            #echo export EC2PublicIP=$(aws ec2 describe-instances --filters Name=tag:Name,Values=lecture13-ec2 --query Reservations[].Instances[].PublicIpAddress[] --output text) >> env_vars.sh
            #echo export RDSEndPoint=$(aws rds describe-db-instances --db-instance-identifier lecture13-rds --query DBInstances[].Endpoint[].Address[] --output text) >> env_vars.sh
            #echo export RDSUser=$(aws rds describe-db-instances --db-instance-identifier lecture13-rds --query DBInstances[].MasterUsername[] --output text) >> env_vars.sh
            #echo export RDSPass=$(aws ssm get-parameter --name /lecture13/rds-pass --with-decryption --query Parameter.Value --output text) >> env_vars.sh
            #echo export S3Name=$(aws cloudformation describe-stack-resources --stack-name lecture13-s3 --query StackResources[].PhysicalResourceId[] --output text) >> env_vars.sh
            #echo export ALBDNSName=$(aws elbv2 describe-load-balancers --names lecture13-lb --query LoadBalancers[].DNSName[] --output text) >> env_vars.sh
            #----
            echo export EC2InstanceId=$(aws cloudformation describe-stack-resources --stack-name << pipeline.parameters.stack-name >>-ec2 --query "StackResources[?ResourceType=='AWS::EC2::Instance'].PhysicalResourceId" --output text) >> env_vars.sh
            echo export EC2PublicIP=$(aws ec2 describe-instances --instance-ids $EC2InstanceId --query Reservations[].Instances[].PublicIpAddress[] --output text) >> env_vars.sh
            #----
            echo export RDSResourceID=$(aws cloudformation describe-stack-resources --stack-name << pipeline.parameters.stack-name >>-rds --query "StackResources[?ResourceType=='AWS::RDS::DBInstance'].PhysicalResourceId" --output text) >> env_vars.sh
            echo export RDSEndPoint=$(aws rds describe-db-instances --db-instance-identifier $(RDSResourceID) --query DBInstances[].Endpoint[].Address[] --output text) >> env_vars.sh
            echo export RDSUser=$(aws rds describe-db-instances --db-instance-identifier $(RDSResourceID) --query DBInstances[].MasterUsername[] --output text) >> env_vars.sh
            #----
            echo "Note: Create SSM parameter on AWS Console, using SecureString and named "/<< pipeline.parameters.stack-name >>/rds-pass" in advance"
            echo export RDSPass=$(aws ssm get-parameter --name /<< pipeline.parameters.stack-name >>/rds-pass --with-decryption --query Parameter.Value --output text) >> env_vars.sh
            #----
            echo export S3Name=$(aws cloudformation describe-stack-resources --stack-name << pipeline.parameters.stack-name >>-s3 --query StackResources[].PhysicalResourceId[] --output text) >> env_vars.sh
            #----
            echo export ALBArn=$(aws cloudformation describe-stack-resources --stack-name << pipeline.parameters.stack-name >>-alb --query "StackResources[?ResourceType=='AWS::ElasticLoadBalancingV2::LoadBalancer'].PhysicalResourceId" --output text) >> env_vars.sh
            echo export ALBDNSName=$(aws elbv2 describe-load-balancers --load-balancer-arns $ALBArn --query LoadBalancers[].DNSName[] --output text) >> env_vars.sh
            #----
            cat env_vars.sh
      - persist_to_workspace:  # Enables users to add files in a workspace, and the "attach_workspace" step does to download contents from it within a job
          root: .
          paths:
            - env_vars.sh

#----Ansible----
  execute-ansible:
    executor: ansible-playbook/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: input variables from env_vars into ansible files by replace command
          command: |
            source env_vars.sh
            cat env_vars.sh
            sed -i "s/replace_ec2_publicip/${EC2PublicIP}/g" ansible/inventories/host.yml
            sed -i "s/replace_rds_endpoint/${RDSEndPoint}/g" ansible/site.yml
            sed -i "s/replace_rds_user/${RDSUser}/g" ansible/site.yml
            sed -i "s/replace_rds_pass/${RDSPass}/g" ansible/site.yml
            sed -i "s/replace_s3_name/${S3Name}/g" ansible/site.yml
            sed -i "s/replace_alb_dnsname/${ALBDNSName}/g" ansible/site.yml
            cat ansible/inventories/host.yml
            cat ansible/site.yml
      - add_ssh_keys:
          fingerprints:
            - SHA256:JOh3Qwxu/5trsr0W0Cs5tpYk62jg3cIsuw9f/U1yBsQ
      - ansible-playbook/install:
          version: 2.9.23
      - ansible-playbook/playbook:
          playbook: ansible/site.yml
          playbook-options: -i ansible/inventories/host.yml

#----Serverspec----
  execute-serverspec:
    executor: ruby/default
    steps:
      - checkout
      #- add_ssh_keys:
          #fingerprints:
            #- SHA256:JOh3Qwxu/5trsr0W0Cs5tpYk62jg3cIsuw9f/U1yBsQ
      - attach_workspace:
          at: .
      - run:
          name: input host(Public IP) from env_vars into spec_helper replace command
          command: |
            source env_vars.sh
            cat env_vars.sh
            mkdir -p ~/.ssh
            #touch ~/.ssh/config
            echo "Host webserver" >> ~/.ssh/config
            echo "  HostName ${EC2PublicIP}" >> ~/.ssh/config
            echo "  User ec2-user" >> ~/.ssh/config
            #echo "  IdentityFile >>  ~/.ssh/id_rsa"
            cat ~/.ssh/config
      - ruby/install:
          version: 3.2.3
      - ruby/install-deps:
          app-dir: serverspec
      - run:
          name: bundle install for dependencies
          command: |
            cd serverspec
            bundle install
            pwd
      - run:
          name: execute serverspec tests
          command: |
            cd serverspec
            bundle exec rake spec

workflows:
  lecture13-workflow:
    jobs:
      #- cfn-lint
      #- execute-cfn:
          #requires:
            #- cfn-lint
      - get-variables-from-cfn #:
          #requires:
            #- execute-cfn
      #- execute-ansible:
          #requires:
            #- get-variables-from-cfn
      #- execute-serverspec:
          #requires:
            #- get-variables-from-cfn
