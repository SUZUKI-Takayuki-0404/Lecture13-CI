version: 2.1

orbs:
  python: circleci/python@2.0.3
  aws-cli: circleci/aws-cli@4.1.3
  aws-cloudformation: orbss/aws-cloudformation@0.1.6
  ansible-playbook: orbss/ansible-playbook@0.0.5
  ruby: circleci/ruby@2.1.3

jobs:
  cfn-lint:
    executor: python/default
    steps:
      - checkout
      - run: pip install cfn-lint
      - run:
          name: run cfn-lint
          command: |
            cfn-lint -i W3002 -t cloudformation/*.yml

#----CloudFormation(cfn)----
  execute-cfn:
    executor: aws-cloudformation/default
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - aws-cloudformation/deploy:
          stack-name: "lecture13-vpc"
          template-file-path: "cloudformation/lect13-vpc.yml"
      - aws-cloudformation/deploy:
          stack-name: "lecture13-ec2"
          template-file-path: "cloudformation/lect13-ec2.yml"
          capabilities: CAPABILITY_NAMED_IAM
      - aws-cloudformation/deploy:
          stack-name: "lecture13-s3"
          template-file-path: "cloudformation/lect13-s3.yml"
      - aws-cloudformation/deploy:
          stack-name: "lecture13-rds"
          template-file-path: "cloudformation/lect13-rds.yml"
      - aws-cloudformation/deploy:
          stack-name: "lecture13-alb"
          template-file-path: "cloudformation/lect13-alb.yml"
      - aws-cloudformation/deploy:
          stack-name: "lecture13-cw"
          template-file-path: "cloudformation/lect13-cw.yml"
          capabilities: CAPABILITY_NAMED_IAM

#----Get-variables-from-cfn----
  get-variables-from-cfn:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - run:  # Get values of EC2 Public IP, RDS Username, RDS Password, RDS Endpoint and ALB DNS Host, using AWS CLI
          name: set environment variables in env_vars.sh
          command: |
            echo export EC2PublicIP=$(aws ec2 describe-instances --filters Name=tag:Name,Values=lecture13-ec2 --query Reservations[].Instances[].PublicIpAddress[] --output text) >> env_vars.sh
            echo export RDSEndPoint=$(aws rds describe-db-instances --db-instance-identifier lecture13-rds --query DBInstances[].Endpoint[].Address[] --output text) >> env_vars.sh
            echo export RDSUser=$(aws rds describe-db-instances --db-instance-identifier lecture13-rds --query DBInstances[].MasterUsername[] --output text) >> env_vars.sh
            echo export RDSPass=$(aws ssm get-parameter --name /lecture13/rds-pass --with-decryption --query Parameter.Value --output text) >> env_vars.sh
            echo export S3Name=$(aws cloudformation describe-stacks --stack-name lecture13-s3 --query Stacks[].Parameters[].ParameterValue[] --output text) >> env_vars.sh
            echo export ALBDNSName=$(aws elbv2 describe-load-balancers --names lecture13-lb --query LoadBalancers[].DNSName[] --output text) >> env_vars.sh
            cat env_vars.sh
            #echo '#!/bin/bash' >> env_vars.sh
      # The "persist_to_workspace" step enables users to add files in a workspace, and the "attach_workspace" step does to download contents from it within a job
      - persist_to_workspace:
          root: .
          paths:
            - env_vars.sh

#----Ansible----
  execute-ansible:
    executor: ansible-playbook/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: input variables from env_vars into ansible files by replace command
          command: |
            source env_vars.sh
            cat env_vars.sh
            sed -i "s/ec2_publicip/${EC2PublicIP}/g" ansible/inventories/host.yml
            sed -i "s/rds_endpoint/${RDSEndPoint}/g" ansible/site.yml
            sed -i "s/rds_user/${RDSUser}/g" ansible/site.yml
            sed -i "s/rds_pass/${RDSPass}/g" ansible/site.yml
            sed -i "s/s3_name/${S3Name}/g" ansible/site.yml
            sed -i "s/alb_dnsname/${ALBDNSName}/g" ansible/site.yml
            cat ansible/inventories/host.yml
            cat ansible/ansible.cfg
            cat ansible/site.yml

      - add_ssh_keys:
          fingerprints:
            - ${KEY_FINGERPRINT} #SHA256:9shNMaqhTZWdPXKvNdj0iz3TqkYWKvoJ7F6tTVY5LtI
      - ansible-playbook/install:
          version: 2.9.23
      - ansible-playbook/playbook:
          playbook: ansible/site.yml
          #playbook-options: -i ${AWS_EC2_IP}, --private-key ~/.ssh/ansible-test-key

#----Serverspec----
workflows:
  lecture13-workflow:
    jobs:
      #- cfn-lint
      #- execute-cfn:
      #    requires:
      #      - cfn-lint
      - get-variables-from-cfn
      #    requires:
      #      - execute-cfn
      - execute-ansible:
          requires:
            - get-variables-from-cfn
